"""
Unit tests for the posts module.

@author: Sean Slipetz
"""

from django.test import TestCase
from posts.models import Post, PostForm, EditPostForm, Photo, UploadForm
from datetime import datetime
import uuid


class PostsTest(TestCase):
    
    def new_post_for_testing(self):
        """
        creates a new post with required fields filled out for use in testing
        """
        post = Post(url="test", creator="test@test.com", title="test", text_content="test", type="blog")
        post.save()
        return post
    
    def test_default_fields_on_creation(self):
        """
        Tests that the expected fields have autogenerated values on object creation
        """
        post = self.new_post_for_testing()
        self.assertFalse(post.created == None)
        self.assertFalse(post.last_modified == None)
        post.save()
        self.assertTrue(post.last_modified >= post.created)
        self.assertFalse(post.verified)
        self.assertTrue(post.flag_count == 0)
        self.assertIsNotNone(post.uuid)
        self.assertTrue(post.url is "test")
        self.assertTrue(post.title is "test")
        self.assertTrue(post.text_content is "test")
        self.assertTrue(post.creator == "test@test.com")
        self.assertTrue(post.type is "blog")
        
    def test_mark_verified(self):
        post = self.new_post_for_testing()
        post.mark_verified()
        self.assertTrue(post.verified)
        
    def test_is_verified(self):
        post = self.new_post_for_testing()
        self.assertFalse(post.is_verified())
        post.mark_verified()
        self.assertTrue(post.is_verified())
    def test_renew(self):
        post = self.new_post_for_testing()
        post.renew()
        self.assertTrue(post.created < post.last_modified)
    
    def test_get_type(self):
        post = self.new_post_for_testing()
        self.assertTrue(post.get_type() is "blog")
        post.type="proj"
        self.assertTrue(post.get_type() is "proj")
        post.type="stry"
        self.assertTrue(post.get_type() is "stry")
    
    def test_set_type(self):
        post = self.new_post_for_testing()
        self.assertFalse(post.get_type() is None)
        post.set_type("blog")
        self.assertTrue(post.get_type() is "blog")
        post.set_type("proj")
        self.assertTrue(post.get_type() is "proj")
        post.set_type("stry")
        self.assertTrue(post.get_type() is "stry")
        
    def test_set_url(self):
        post = self.new_post_for_testing()
        self.assertTrue(post.url is "test")
        post.set_url("new_test")
        self.assertFalse(post.url is "test")
        self.assertTrue(post.url is "new_test")
        
    def test_get_creator(self):
        post = self.new_post_for_testing()
        post.creator = "django@python.com"
        self.assertTrue(post.get_creator() is "django@python.com")

    def test_get_created_time(self):
        post = self.new_post_for_testing()
        post.save()
        self.assertTrue(post.get_created_time() < post.last_modified and  post.get_created_time() < datetime.now())
        new_time = datetime.now()
        post.created = new_time
        self.assertEquals(post.get_created_time(), new_time)
        
    def test_get_last_modified_time(self):
        post = self.new_post_for_testing()
        pre_mod = datetime.now()
        post.save()
        post_mod = datetime.now()
        self.assertTrue(pre_mod <= post.get_last_modified_time() <= post_mod)
        new_time = datetime.now()
        post.last_modified = new_time
        self.assertEquals(post.get_last_modified_time(), new_time)
        
    def test_get_title(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.get_title(), "test")
        
    def test_set_title(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.get_title(), "test")
        post.set_title("new_title")
        self.assertNotEqual(post.get_title(), "test")
        self.assertEqual(post.get_title(), "new_title")
        
    def test_get_text_content(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.get_text_content(), "test")
        
    def test_set_text_content(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.get_text_content(), "test")
        post.set_text_content("new_text")
        self.assertNotEqual(post.get_text_content(), "test")
        self.assertEqual(post.get_text_content(), "new_text")
        
    def test_inc_flag_count(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.flag_count, 0)
        post.increment_flags()
        self.assertEqual(post.flag_count, 1)
        post.increment_flags()
        post.increment_flags()
        post.increment_flags()
        self.assertEqual(post.flag_count, 4)
        
    def test_get_flag_count(self):
        post = self.new_post_for_testing()
        self.assertEqual(post.get_flag_count(), 0)
        post.flag_count = 100
        self.assertEqual(post.get_flag_count(), 100)
        post.flag_count = -222
        self.assertEqual(post.get_flag_count(), -222)

    def test_get_uuid(self):
        post = self.new_post_for_testing()
        new_uuid = uuid.uuid4()
        post.uuid = new_uuid
        self.assertIsNotNone(post.uuid)
        self.assertEqual(post.uuid, new_uuid)